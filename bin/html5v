#!/usr/bin/env node
/* eslint-disable no-console */

const {existsSync} = require('fs')
const url = require('url')
const program = require('caporal')
const updateNotifier = require('update-notifier')
const ora = require('ora')
const chalk = require('chalk')
const logSymbols = require('log-symbols')
const pkg = require('../package.json')
const validator = require('../index')

const normalizeStr = str => {
  return str
    .replace(/[\b]/g, '\\b')
    .replace(/[\f]/g, '\\f')
    .replace(/[\n]/g, '\\n')
    .replace(/[\r]/g, '\\r')
    .replace(/[\t]/g, '\\t')
}

const highlight = (str, pos, length, color) => {
  let before = ''
  if (typeof str === 'string') {
    normalizeStr(str.substr(0, pos))
  }

  let after = ''
  if (typeof str === 'string') {
    normalizeStr(str.substr(pos + length, str.length))
  }

  let content = ''
  if (typeof str === 'string') {
    normalizeStr(str.substr(pos, length))
  }

  return before + chalk.underline[color](content) + after
}

const symbolTypes = {
  ERROR: 'error',
  WARN: 'warning'
}

const colorTypes = {
  RED: 'red',
  YELLOW: 'yellow'
}

const errTypes = {
  ERROR: 'error',
  WARN: 'warning',
  INFO: 'info'
}

const simpleDotsLoader = {
  interval: 70,
  frames: [
    '.  ',
    '.. ',
    ' ..',
    ' ..',
    '  .',
    '   '
  ]
}

const action = (args, options) => {
  if (!args.source) {
    throw new Error('No Source Defined.')
  }

  const uri = url.parse(args.source)
  const invalidUrl = uri.protocol === null && uri.host === null
  let source = 'Source Code'

  if (invalidUrl === false) {
    source = args.source
  }

  if (existsSync(args.source)) {
    source = args.source
  }

  let spinner

  if (!options.json) {
    console.log('')
    spinner = ora(`Validating ${source}`)
    spinner.spinner = simpleDotsLoader
    spinner.start()
  }

  const happyExit = () => {
    if (!options.json) {
      spinner.succeed('Cool, Your HTML is Valid.')
      console.log('')
    }

    process.exit()
  }

  validator(args.source).then(result => {
    if (result.messages.length === 0) {
      happyExit()
    }

    const totals = {errors: 0, warnings: 0}
    const messages = result.messages.filter(item => {
      return item.type === errTypes.ERROR || (item.type === errTypes.INFO && item.subType === errTypes.WARN && !options.skipWarning)
    })

    if (options.json) {
      process.stdout.write(JSON.stringify(messages))
      process.exit()
    }

    spinner.clear()

    messages.forEach(item => {
      let symbol = symbolTypes.ERROR
      let line = item.lastLine
      let color = colorTypes.RED

      if (item.firstColumn) {
        line += ':' + item.firstColumn
      }

      if (item.type === errTypes.ERROR) {
        totals.errors++
      }

      if (item.type === errTypes.INFO && item.subType === errTypes.WARN && !options.skipWarning) {
        totals.warnings++
        symbol = symbolTypes.WARN
        color = colorTypes.YELLOW
      }

      const data = highlight(item.extract, item.hiliteStart, item.hiliteLength, color)
      process.stdout.write(`  ${logSymbols[symbol]} ${chalk.underline.white(line)} ${item.message}`)
      process.stdout.write('\n')
      process.stdout.write('  ' + data)
      process.stdout.write('\n\n')
    })

    if (totals.errors > 0 || totals.warnings > 0) {
      spinner.frame()
      console.log('')
      spinner.fail(`You've got ${totals.errors} errors, and ${totals.warnings} warnings.`)
      console.log('')

      if (totals.errors === 0) {
        process.exit()
      } else {
        process.exit(1)
      }
    } else {
      happyExit()
    }
  }).catch(err => {
    spinner.fail(err.message)
    process.exit(1)
  })
}

program
  .version(pkg.version)
  .description('W3 Validation Tool')
  .argument('[source]', 'Source could be url, filename, or quoted strings.', program.STRING)
  .option('--skip-warning', 'Skip warning.', program.BOOLEAN)
  .option('--json', 'Print output in JSON format', program.BOOLEAN)
  .action(action)

program.parse(process.argv)

// Notify update, cached every hour
updateNotifier({
  pkg,
  updateCheckInterval: 1000 * 60 * 60
}).notify()
